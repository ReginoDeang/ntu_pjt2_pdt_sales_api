version: 2.1

orbs:
  docker: circleci/docker@2.4.0
  snyk: snyk/snyk@2.0.1
  maven: circleci/maven@1.4.1
  heroku: circleci/heroku@2.0.0

executors:
  default-executor:
    docker:
      - image: cimg/openjdk:17.0.8

# define jobs
jobs:
  build: # Define the 'build' job
    executor: default-executor
    steps:
      - checkout  # Check out your code from version control
      
      # Add a step to update the permissions of the mvnw file
      - run:
          name: Update mvnw permissions
          command: chmod +x ./mvnw
      
      - run:
          name: Build Spring Boot App
          # Compile and package your Spring Boot app with Maven
          command: |
            ./mvnw clean package -DskipTests
            mv target/pdt_sales-0.0.1-SNAPSHOT.jar app.jar
      
  test:
    executor: default-executor
    steps:
      - checkout
      - run:
          name: Run 8 Spring Boot Unit Tests in 2 Java Files
          command: |
            mvn test 

  synk_scan:
    executor: default-executor
    environment:
      IMAGE_NAME: lohcd/pdt_sales

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Update mvnw permissions
          command: chmod +x ./mvnw

      - run:
          name: Build Spring Boot App
          command: ./mvnw clean package -DskipTests

      - save_cache:
          key: app-jar-{{ checksum "pom.xml" }}
          paths:
            - ./target/pdt_sales-0.0.1-SNAPSHOT.jar

      - restore_cache:
          key: app-jar-{{ checksum "pom.xml" }}

      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME .

      - snyk/scan:
          docker-image-name: $IMAGE_NAME
          severity-threshold: high

  build-and-push:
    executor: default-executor  # Use a Docker executor
    steps:
      - setup_remote_docker
      - checkout

      - run:
          name: Update mvnw permissions
          command: chmod +x ./mvnw

      - run:
          name: Build Spring Boot App
          command: ./mvnw clean package -DskipTests

      - save_cache:
          key: app-jar-{{ checksum "pom.xml" }}
          paths:
            - ./target/pdt_sales-0.0.1-SNAPSHOT.jar

      - restore_cache:
          key: app-jar-{{ checksum "pom.xml" }}

      - run:
          name: Docker Hub Login
          command: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_LOGIN" --password-stdin




      # Use the docker/build command to build your Docker image
      - docker/build:
          image: reginodeang/pdt_sales
          # tag: 1.0
      # Push the Docker image to Docker Hub using docker/push
      - docker/push:
          image: reginodeang/pdt_sales  # Push the same image you built
          # tag: 1.0
          # try

  # deploy:
  #   executor: default-executor
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install Heroku CLI
  #         command: curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
  #     - heroku/install
  #     - run:
  #         name: Heroku Login
  #         command: heroku login -i
  #     - run:
  #         name: Heroku Container Login
  #         command: |
  #           echo "HEROKU_API_KEY: $HEROKU_API_KEY"
  #           echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
  #         # command: echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
  #     - run:
  #         name: Build and Push Docker Image to Heroku
  #         command: |
  #           docker build -t registry.heroku.com/pjt2-pdt-sales/web .
  #           docker push registry.heroku.com/pjt2-pdt-sales/web
  #     - run:
  #         name: Heroku Release
  #         command: heroku container:release web -a pjt2-pdt-sales

  deploy:
    docker:
      - image: cimg/node:16.10
    steps:
      - setup_remote_docker
      - heroku/install #installs heroku cli for our run command
      - checkout
      - run:
          name: Heroku Container Push #the name of the group of commands we are running
          command: |
            heroku container:login
            heroku container:push web -a pjt2-pdt-sales
            heroku container:release web -a pjt2-pdt-sales
        #The push command pushes the image to heroku's container registry
        #The release command deploys the image from heroku's container registry


workflows:
  version: 2
  ci_flow:
    jobs:
      - build
      - test:
          requires:
            - build
      - synk_scan:
          requires:
            - build
      - build-and-push:
          requires:
            - test
      - deploy:
          requires:
            - build-and-push







